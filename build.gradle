import org.apache.tools.ant.filters.ReplaceTokens

import java.text.SimpleDateFormat

buildscript {
    ext["spock.version"] = "1.1-groovy-2.4"
    repositories {
    	maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    	 maven { url "http://central.maven.org/maven2/" }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: 'eclipse'
apply plugin: "groovy"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "jacoco"

group 'com.itmaoo'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url 'https://mvnrepository.com/artifact/' }
    mavenLocal()
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            //artifact javadocJar
        }
    }
 
}

publish.dependsOn(build)

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

def buildTime() {
    final dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ")
    dateFormat.timeZone = TimeZone.getTimeZone('Asia/Shanghai')
    dateFormat.format(new Date())
}

springBoot {
    buildInfo {
        properties {
            additional = [
                    by: System.properties['user.home'],
                    operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']}",
                    machine: InetAddress.localHost.hostName,
                    time: buildTime()
            ]
        }
    }
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

[compileJava,compileTestJava,javadoc]*.options*.encoding = "UTF-8"

processResources {
    filesMatching('bootstrap.yml') {
        filter(ReplaceTokens, tokens: ["project.version": project.version])
    }
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
	compile ('org.springframework.boot:spring-boot-starter-amqp')
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile('org.springframework.boot:spring-boot-starter-data-redis')
    compile 'org.springframework.cloud:spring-cloud-starter-oauth2'
    compile('org.springframework.cloud:spring-cloud-starter-openfeign')
    compile('io.github.openfeign.form:feign-form-spring:2.1.0')
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
	
    compile('com.zaxxer:HikariCP')
    compile('org.apache.commons:commons-io:1.3.2')
	compile('org.apache.commons:commons-lang3:3.2.1')
    runtime('mysql:mysql-connector-java')
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    testCompile("org.codehaus.groovy:groovy-all")
//        testCompile "cglib:cglib-nodep:3.2.5" // for mocking classes
    testCompile("org.springframework.boot:spring-boot-starter-test")
}
